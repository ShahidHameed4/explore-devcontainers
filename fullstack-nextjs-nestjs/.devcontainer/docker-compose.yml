version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: fullstack_dev
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d fullstack_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend API
  backend:
    build:
      context: ../backend
      dockerfile: ../.devcontainer/Dockerfile.backend
    volumes:
      - ../backend:/app:cached
      - /app/node_modules
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=fullstack_dev
      - DATABASE_USER=devuser
      - DATABASE_PASSWORD=devpass
      - JWT_SECRET=dev-secret-key
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    command: npm run start:dev

  # Next.js Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: ../.devcontainer/Dockerfile.frontend
    volumes:
      - ../frontend:/app:cached
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_APP_NAME=FullStack DevContainer
    depends_on:
      - backend
    networks:
      - app-network
    command: npm run dev

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
